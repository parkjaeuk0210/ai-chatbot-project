System.register([],function(e,s){"use strict";return{execute:function(){e({lazyLoadPdfJs:function(){return t||(t=r("https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js").then(()=>(window.pdfjsLib&&(window.pdfjsLib.GlobalWorkerOptions.workerSrc="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js"),window.pdfjsLib)).catch(e=>{throw t=null,e}),t)},lazyLoadScript:r});class s{constructor(e={}){this.options={root:null,rootMargin:"50px 0px",threshold:.01,...e},this.imageObserver=null,this.loadedImages=new Set,this.init()}init(){"IntersectionObserver"in window&&(this.imageObserver=new IntersectionObserver(e=>{e.forEach(e=>{e.isIntersecting&&this.loadImage(e.target)})},this.options))}loadImage(e){const s=e.dataset.src;if(!s||this.loadedImages.has(s))return;const r=new Image;r.onload=()=>{e.src=s,e.classList.add("loaded"),this.loadedImages.add(s),this.imageObserver&&this.imageObserver.unobserve(e)},r.onerror=()=>{e.classList.add("error"),this.imageObserver&&this.imageObserver.unobserve(e)},r.src=s}observe(e){this.imageObserver&&e.dataset.src?this.imageObserver.observe(e):this.imageObserver||this.loadImage(e)}observeAll(e=document){e.querySelectorAll("img[data-src]").forEach(e=>this.observe(e))}disconnect(){this.imageObserver&&this.imageObserver.disconnect()}}function r(e,s={}){return new Promise((r,t)=>{if(document.querySelector(`script[src="${e}"]`))return void r();const i=document.createElement("script");i.src=e,Object.entries(s).forEach(([e,s])=>{i.setAttribute(e,s)}),i.onload=r,i.onerror=t,document.head.appendChild(i)})}e("ImageLazyLoader",s);let t=null;new s}}});
